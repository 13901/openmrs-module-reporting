/**
 * The contents of this file are subject to the OpenMRS Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://license.openmrs.org
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * Copyright (C) OpenMRS, LLC.  All Rights Reserved.
 */
package org.openmrs.module.report.service;

import java.util.Collection;
import java.util.List;
import java.util.Properties;

import org.openmrs.api.APIException;
import org.openmrs.api.OpenmrsService;
import org.openmrs.module.evaluation.EvaluationContext;
import org.openmrs.module.report.ReportData;
import org.openmrs.module.report.ReportSchema;
import org.openmrs.module.report.renderer.RenderingMode;
import org.openmrs.module.report.renderer.ReportRenderer;
import org.springframework.transaction.annotation.Transactional;

/**
 * 
 */
@Transactional
public interface ReportService extends OpenmrsService {
	
	/**
	 * This method evaluates a ReportSchema object for the given EvaluationContext and input Cohort.
	 * It returns the ReportData object which contains the Report "results".
	 * 
	 * @param reportSchema - The {@link ReportSchema}
	 * @param context - The {@link EvaluationContext} which contains the parameters, provides caching for the report evaluation
	 * @return {@link ReportData} - Contains the evaluated report data
	 * @throws APIException
	 */
	public ReportData evaluate(ReportSchema reportSchema, EvaluationContext context);
	
	/**
	 * Return a list of {@link ReportSchema}s
	 * 
	 * @return a List<ReportSchema> object containing all of the {@link ReportSchema}s
	 * @throws APIException
	 */
	@Transactional(readOnly = true)
	public List<ReportSchema> getReportSchemas() throws APIException;
	
	/**
	 * @param uuid
	 * @return the ReportSchema with the given uuid
	 */
	@Transactional(readOnly = true)
	public ReportSchema getReportSchemaByUuid(String uuid) throws APIException;	
	
	/**
	 * Get the {@link ReportSchema} with the given id
	 * 
	 * @param reportSchemaId The Integer ReportSchema id
	 * @return the matching {@link ReportSchema} object
	 * @throws APIException
	 */
	@Transactional(readOnly = true)
	public ReportSchema getReportSchema(Integer reportSchemaId) throws APIException;
	
	/**
	 * Save or update the given <code>ReportSchema</code> in the database. If this is a new
	 * ReportSchema, the returned ReportSchema will have a new
	 * {@link ReportSchema#getReportSchemaId()} inserted into it that was generated by the database
	 * 
	 * @param reportSchema The <code>ReportSchema</code> to save or update
	 * @throws APIException
	 */
	public ReportSchema saveReportSchema(ReportSchema reportSchema) throws APIException;
	
	/**
	 * Deletes a <code>ReportSchema</code> from the database.
	 * 
	 * @param reportSchema The <code>ReportSchema</code> to remove from the system
	 * @throws APIException
	 */
	public void deleteReportSchema(ReportSchema reportSchema);
	
	/**
	 * Returns a Collection<ReportRenderer> of all registered ReportRenderers
	 * 
	 * @return All registered report renderers
	 */
	@Transactional(readOnly = true)
	public Collection<ReportRenderer> getReportRenderers();
	
	/**
	 * Returns a List of {@link RenderingMode}s that the passed {@link ReportSchema} supports, in
	 * their preferred order
	 * 
	 * @return all rendering modes for the given schema, in their preferred order
	 */
	@Transactional(readOnly = true)
	public List<RenderingMode> getRenderingModes(ReportSchema schema);

	
	/**
	 * Gets the macros
	 * 
	 * @return macros
	 */
	@Transactional(readOnly = true)
	public Properties getReportXmlMacros();
	
	/**
	 * Saves the macros
	 * 
	 * @param macros the macros to set
	 */
	public void saveReportXmlMacros(Properties macros);
	
	/**
	 * Applies the report xml macros to the input, and returns it.
	 * 
	 * @param input The text (presumably a report schema xml definition) that you want to apply
	 *            macros to
	 * @return the result of applying macro substitutions to input
	 */
	public String applyReportXmlMacros(String input);

}

